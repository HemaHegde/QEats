/*
 *
 *  * Copyright (c) Crio.Do 2019. All rights reserved
 *
 */

package com.crio.qeats.services;

<<<<<<< HEAD
import com.crio.qeats.dto.Restaurant;
=======
>>>>>>> e0015dbefbe23c56d2b2a734d1897d760651b5b6
import com.crio.qeats.exchanges.GetRestaurantsRequest;
import com.crio.qeats.exchanges.GetRestaurantsResponse;
import com.crio.qeats.repositoryservices.RestaurantRepositoryService;
import java.time.LocalTime;
<<<<<<< HEAD
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
=======
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
>>>>>>> e0015dbefbe23c56d2b2a734d1897d760651b5b6
import org.springframework.stereotype.Service;

@Service
@Log4j2
<<<<<<< HEAD
@Primary
=======
>>>>>>> e0015dbefbe23c56d2b2a734d1897d760651b5b6
public class RestaurantServiceImpl implements RestaurantService {

  private final Double peakHoursServingRadiusInKms = 3.0;
  private final Double normalHoursServingRadiusInKms = 5.0;
  @Autowired
  private RestaurantRepositoryService restaurantRepositoryService;


  // TODO: CRIO_TASK_MODULE_RESTAURANTSAPI - Implement findAllRestaurantsCloseby.
  // Check RestaurantService.java file for the interface contract.
  @Override
  public GetRestaurantsResponse findAllRestaurantsCloseBy(
<<<<<<< HEAD
          GetRestaurantsRequest getRestaurantsRequest, LocalTime currentTime) {


    int currentHour = currentTime.getHour();
    int minute = currentTime.getMinute();
    boolean flag = ((currentHour >= 8 && currentHour <= 10)
            || (currentHour >= 13 && currentHour <= 14)
            || (currentHour >= 19 && currentHour <= 21));
    List<Restaurant> rst;
    if (flag) {
      if (((currentHour == 10) || (currentHour == 14) || (currentHour == 21)) && minute > 0) {
        rst = restaurantRepositoryService.findAllRestaurantsCloseBy(
                getRestaurantsRequest.getLatitude(),
                getRestaurantsRequest.getLongitude(), currentTime,
                this.normalHoursServingRadiusInKms);
      } else {
        rst = restaurantRepositoryService.findAllRestaurantsCloseBy(
                getRestaurantsRequest.getLatitude(),
                getRestaurantsRequest.getLongitude(), currentTime,
                this.peakHoursServingRadiusInKms);
      }
    } else {
      rst = restaurantRepositoryService.findAllRestaurantsCloseBy(
              getRestaurantsRequest.getLatitude(),
              getRestaurantsRequest.getLongitude(),
              currentTime, this.normalHoursServingRadiusInKms);
    }
    GetRestaurantsResponse response = new GetRestaurantsResponse();
    response.setRestaurants(rst);
    return response;


=======
      GetRestaurantsRequest getRestaurantsRequest, LocalTime currentTime) {


     return null;
>>>>>>> e0015dbefbe23c56d2b2a734d1897d760651b5b6
  }

  // TODO: CRIO_TASK_MODULE_RESTAURANTSEARCH
  // Implement findRestaurantsBySearchQuery. The request object has the search string.
  // We have to combine results from multiple sources:
  // 1. Restaurants by name (exact and inexact)
  // 2. Restaurants by cuisines (also called attributes)
  // 3. Restaurants by food items it serves
  // 4. Restaurants by food item attributes (spicy, sweet, etc)
  // Remember, a restaurant must be present only once in the resulting list.
  // Check RestaurantService.java file for the interface contract.
  @Override
  public GetRestaurantsResponse findRestaurantsBySearchQuery(
<<<<<<< HEAD
          GetRestaurantsRequest getRestaurantsRequest, LocalTime currentTime) {
    String searchString = getRestaurantsRequest.getSearchFor();
    if (searchString == null || searchString.equals("")) {
      return findAllRestaurantsCloseBy(getRestaurantsRequest, currentTime);
    }
    int currentHour = currentTime.getHour();
    int minute = currentTime.getMinute();
    boolean flag = ((currentHour >= 8 && currentHour <= 10)
            || (currentHour >= 13 && currentHour <= 14)
            || (currentHour >= 19 && currentHour <= 21));

    Double latitude = getRestaurantsRequest.getLatitude();
    Double longitude = getRestaurantsRequest.getLongitude();
    String searchFor = getRestaurantsRequest.getSearchFor();
    Set<Restaurant> set = new HashSet<>();
    List<Restaurant> allValid = new ArrayList<>();
    if (flag) {
      if (((currentHour == 10) || (currentHour == 14) || (currentHour == 21)) && minute > 0) {
        for (Restaurant restaurant : restaurantRepositoryService.findRestaurantsByName(latitude,
                longitude, searchFor, currentTime, normalHoursServingRadiusInKms)) {
          if (!set.contains(restaurant)) {
            allValid.add(restaurant);
            set.add(restaurant);
          }
        }

        for (Restaurant restaurant :
                restaurantRepositoryService.findRestaurantsByAttributes(latitude,
                longitude, searchFor, currentTime, normalHoursServingRadiusInKms)) {
          if (!set.contains(restaurant)) {
            allValid.add(restaurant);
            set.add(restaurant);
          }
        }

        for (Restaurant restaurant :
                restaurantRepositoryService.findRestaurantsByItemName(latitude,
                longitude, searchFor, currentTime, normalHoursServingRadiusInKms)) {
          if (!set.contains(restaurant)) {
            allValid.add(restaurant);
            set.add(restaurant);
          }
        }

        for (Restaurant restaurant :
                restaurantRepositoryService.findRestaurantsByItemAttributes(latitude,
                longitude, searchFor, currentTime, normalHoursServingRadiusInKms)) {
          if (!set.contains(restaurant)) {
            allValid.add(restaurant);
            set.add(restaurant);
          }
        }
      } else {

        for (Restaurant restaurant :
                restaurantRepositoryService.findRestaurantsByName(latitude,
                        longitude, searchFor, currentTime, peakHoursServingRadiusInKms)) {
          if (!set.contains(restaurant)) {
            allValid.add(restaurant);
            set.add(restaurant);
          }
        }

        for (Restaurant restaurant :
                restaurantRepositoryService.findRestaurantsByAttributes(latitude,
                longitude, searchFor, currentTime, peakHoursServingRadiusInKms)) {
          if (!set.contains(restaurant)) {
            allValid.add(restaurant);
            set.add(restaurant);
          }
        }

        for (Restaurant restaurant :
                restaurantRepositoryService.findRestaurantsByItemName(latitude,
                longitude, searchFor, currentTime, peakHoursServingRadiusInKms)) {
          if (!set.contains(restaurant)) {
            allValid.add(restaurant);
            set.add(restaurant);
          }
        }

        for (Restaurant restaurant :
                restaurantRepositoryService.findRestaurantsByItemAttributes(latitude,
                longitude, searchFor, currentTime, peakHoursServingRadiusInKms)) {
          if (!set.contains(restaurant)) {
            allValid.add(restaurant);
            set.add(restaurant);
          }
        }
      }
    } else {
      for (Restaurant restaurant :
              restaurantRepositoryService.findRestaurantsByName(latitude,
                      longitude, searchFor, currentTime, normalHoursServingRadiusInKms)) {
        if (!set.contains(restaurant)) {
          allValid.add(restaurant);
          set.add(restaurant);
        }
      }

      for (Restaurant restaurant :
              restaurantRepositoryService.findRestaurantsByAttributes(latitude,
                      longitude, searchFor, currentTime, normalHoursServingRadiusInKms)) {
        if (!set.contains(restaurant)) {
          allValid.add(restaurant);
          set.add(restaurant);
        }
      }

      for (Restaurant restaurant :
              restaurantRepositoryService.findRestaurantsByItemName(latitude,
                      longitude, searchFor, currentTime, normalHoursServingRadiusInKms)) {
        if (!set.contains(restaurant)) {
          allValid.add(restaurant);
          set.add(restaurant);
        }
      }

      for (Restaurant restaurant :
              restaurantRepositoryService.findRestaurantsByItemAttributes(latitude,
                      longitude, searchFor, currentTime, normalHoursServingRadiusInKms)) {
        if (!set.contains(restaurant)) {
          allValid.add(restaurant);
          set.add(restaurant);
        }
      }
    }
    GetRestaurantsResponse response = new GetRestaurantsResponse();
    response.setRestaurants(allValid);
    return response;


=======
      GetRestaurantsRequest getRestaurantsRequest, LocalTime currentTime) {

     return null;
  }

  // TODO: CRIO_TASK_MODULE_MULTITHREADING: Implement multi-threaded version of RestaurantSearch.
  // Implement variant of findRestaurantsBySearchQuery which is at least 1.5x time faster than
  // findRestaurantsBySearchQuery.
  @Override
  public GetRestaurantsResponse findRestaurantsBySearchQueryMt(
      GetRestaurantsRequest getRestaurantsRequest, LocalTime currentTime) {

     return null;
>>>>>>> e0015dbefbe23c56d2b2a734d1897d760651b5b6
  }
}
